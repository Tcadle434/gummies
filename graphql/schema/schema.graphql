"""A high precision floating point value represented as a string"""
scalar BigFloat

"""
Boolean expression comparing fields on type "BigFloat"
"""
input BigFloatFilter {
  eq: BigFloat
  gt: BigFloat
  gte: BigFloat
  in: [BigFloat!]
  is: FilterIs
  lt: BigFloat
  lte: BigFloat
  neq: BigFloat
}

"""An arbitrary size integer represented as a string"""
scalar BigInt

"""
Boolean expression comparing fields on type "BigInt"
"""
input BigIntFilter {
  eq: BigInt
  gt: BigInt
  gte: BigInt
  in: [BigInt!]
  is: FilterIs
  lt: BigInt
  lte: BigInt
  neq: BigInt
}

"""
Boolean expression comparing fields on type "Boolean"
"""
input BooleanFilter {
  eq: Boolean
  is: FilterIs
}

"""
An opaque string using for tracking a position in results during pagination
"""
scalar Cursor

"""A date wihout time information"""
scalar Date

"""
Boolean expression comparing fields on type "Date"
"""
input DateFilter {
  eq: Date
  gt: Date
  gte: Date
  in: [Date!]
  is: FilterIs
  lt: Date
  lte: Date
  neq: Date
}

"""A date and time"""
scalar Datetime

"""
Boolean expression comparing fields on type "Datetime"
"""
input DatetimeFilter {
  eq: Datetime
  gt: Datetime
  gte: Datetime
  in: [Datetime!]
  is: FilterIs
  lt: Datetime
  lte: Datetime
  neq: Datetime
}

enum FilterIs {
  NULL
  NOT_NULL
}

"""
Boolean expression comparing fields on type "Float"
"""
input FloatFilter {
  eq: Float
  gt: Float
  gte: Float
  in: [Float!]
  is: FilterIs
  lt: Float
  lte: Float
  neq: Float
}

"""
Boolean expression comparing fields on type "ID"
"""
input IDFilter {
  eq: ID
}

"""
Boolean expression comparing fields on type "Int"
"""
input IntFilter {
  eq: Int
  gt: Int
  gte: Int
  in: [Int!]
  is: FilterIs
  lt: Int
  lte: Int
  neq: Int
}

"""A Javascript Object Notation value serialized as a string"""
scalar JSON

"""The root type for creating and mutating data"""
type Mutation {
  """Deletes zero or more records from the `auctions` collection"""
  deleteFromauctionsCollection(
    """Restricts the mutation's impact to records matching the criteria"""
    filter: auctionsFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): auctionsDeleteResponse!

  """Deletes zero or more records from the `blog` collection"""
  deleteFromblogCollection(
    """Restricts the mutation's impact to records matching the criteria"""
    filter: blogFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): blogDeleteResponse!

  """Deletes zero or more records from the `notes` collection"""
  deleteFromnotesCollection(
    """Restricts the mutation's impact to records matching the criteria"""
    filter: notesFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): notesDeleteResponse!

  """Adds one or more `auctions` records to the collection"""
  insertIntoauctionsCollection(objects: [auctionsInsertInput!]!): auctionsInsertResponse

  """Adds one or more `blog` records to the collection"""
  insertIntoblogCollection(objects: [blogInsertInput!]!): blogInsertResponse

  """Adds one or more `notes` records to the collection"""
  insertIntonotesCollection(objects: [notesInsertInput!]!): notesInsertResponse

  """Updates zero or more records in the `auctions` collection"""
  updateauctionsCollection(
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: auctionsUpdateInput!

    """Restricts the mutation's impact to records matching the criteria"""
    filter: auctionsFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): auctionsUpdateResponse!

  """Updates zero or more records in the `blog` collection"""
  updateblogCollection(
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: blogUpdateInput!

    """Restricts the mutation's impact to records matching the criteria"""
    filter: blogFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): blogUpdateResponse!

  """Updates zero or more records in the `notes` collection"""
  updatenotesCollection(
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: notesUpdateInput!

    """Restricts the mutation's impact to records matching the criteria"""
    filter: notesFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): notesUpdateResponse!
}

interface Node {
  """Retrieves a record by `ID`"""
  nodeId: ID!
}

"""Any type not handled by the type system"""
scalar Opaque

"""
Boolean expression comparing fields on type "Opaque"
"""
input OpaqueFilter {
  eq: Opaque
  is: FilterIs
}

"""Defines a per-field sorting order"""
enum OrderByDirection {
  """Ascending order, nulls first"""
  AscNullsFirst

  """Ascending order, nulls last"""
  AscNullsLast

  """Descending order, nulls first"""
  DescNullsFirst

  """Descending order, nulls last"""
  DescNullsLast
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

"""The root type for querying data"""
type Query {
  """A pagable collection of type `auctions`"""
  auctionsCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: auctionsFilter

    """Sort order to apply to the collection"""
    orderBy: [auctionsOrderBy!]
  ): auctionsConnection

  """A pagable collection of type `blog`"""
  blogCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: blogFilter

    """Sort order to apply to the collection"""
    orderBy: [blogOrderBy!]
  ): blogConnection

  """Retrieve a record by its `ID`"""
  node(
    """The record's `ID`"""
    nodeId: ID!
  ): Node

  """A pagable collection of type `notes`"""
  notesCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: notesFilter

    """Sort order to apply to the collection"""
    orderBy: [notesOrderBy!]
  ): notesConnection
}

"""
Boolean expression comparing fields on type "String"
"""
input StringFilter {
  eq: String
  gt: String
  gte: String
  ilike: String
  in: [String!]
  iregex: String
  is: FilterIs
  like: String
  lt: String
  lte: String
  neq: String
  regex: String
  startsWith: String
}

"""A time without date information"""
scalar Time

"""
Boolean expression comparing fields on type "Time"
"""
input TimeFilter {
  eq: Time
  gt: Time
  gte: Time
  in: [Time!]
  is: FilterIs
  lt: Time
  lte: Time
  neq: Time
}

"""A universally unique identifier"""
scalar UUID

"""
Boolean expression comparing fields on type "UUID"
"""
input UUIDFilter {
  eq: UUID
  in: [UUID!]
  is: FilterIs
  neq: UUID
}

type auctions implements Node {
  """Globally Unique Record Identifier"""
  nodeId: ID!
  id: BigInt!
  name: String
  link: String
  isActive: Boolean
}

type auctionsConnection {
  edges: [auctionsEdge!]!
  pageInfo: PageInfo!
}

type auctionsDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [auctions!]!
}

type auctionsEdge {
  cursor: String!
  node: auctions!
}

input auctionsFilter {
  id: BigIntFilter
  name: StringFilter
  link: StringFilter
  isActive: BooleanFilter
  nodeId: IDFilter

  """
  Returns true only if all its inner filters are true, otherwise returns false
  """
  and: [auctionsFilter!]

  """
  Returns true if at least one of its inner filters is true, otherwise returns false
  """
  or: [auctionsFilter!]

  """Negates a filter"""
  not: auctionsFilter
}

input auctionsInsertInput {
  name: String
  link: String
  isActive: Boolean
}

type auctionsInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [auctions!]!
}

input auctionsOrderBy {
  id: OrderByDirection
  name: OrderByDirection
  link: OrderByDirection
  isActive: OrderByDirection
}

input auctionsUpdateInput {
  name: String
  link: String
  isActive: Boolean
}

type auctionsUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [auctions!]!
}

type blog implements Node {
  """Globally Unique Record Identifier"""
  nodeId: ID!
  id: Int!
  title: String!
  subtitle: String
  publishDate: Date
  content: String
}

type blogConnection {
  edges: [blogEdge!]!
  pageInfo: PageInfo!
}

type blogDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [blog!]!
}

type blogEdge {
  cursor: String!
  node: blog!
}

input blogFilter {
  id: IntFilter
  title: StringFilter
  subtitle: StringFilter
  publishDate: DateFilter
  content: StringFilter
  nodeId: IDFilter

  """
  Returns true only if all its inner filters are true, otherwise returns false
  """
  and: [blogFilter!]

  """
  Returns true if at least one of its inner filters is true, otherwise returns false
  """
  or: [blogFilter!]

  """Negates a filter"""
  not: blogFilter
}

input blogInsertInput {
  title: String
  subtitle: String
  publishDate: Date
  content: String
}

type blogInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [blog!]!
}

input blogOrderBy {
  id: OrderByDirection
  title: OrderByDirection
  subtitle: OrderByDirection
  publishDate: OrderByDirection
  content: OrderByDirection
}

input blogUpdateInput {
  title: String
  subtitle: String
  publishDate: Date
  content: String
}

type blogUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [blog!]!
}

type notes implements Node {
  """Globally Unique Record Identifier"""
  nodeId: ID!
  id: Int!
  title: String
}

type notesConnection {
  edges: [notesEdge!]!
  pageInfo: PageInfo!
}

type notesDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [notes!]!
}

type notesEdge {
  cursor: String!
  node: notes!
}

input notesFilter {
  id: IntFilter
  title: StringFilter
  nodeId: IDFilter

  """
  Returns true only if all its inner filters are true, otherwise returns false
  """
  and: [notesFilter!]

  """
  Returns true if at least one of its inner filters is true, otherwise returns false
  """
  or: [notesFilter!]

  """Negates a filter"""
  not: notesFilter
}

input notesInsertInput {
  title: String
}

type notesInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [notes!]!
}

input notesOrderBy {
  id: OrderByDirection
  title: OrderByDirection
}

input notesUpdateInput {
  title: String
}

type notesUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [notes!]!
}